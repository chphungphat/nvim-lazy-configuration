return {
  "kylechui/nvim-surround",
  event = { "BufReadPre", "BufNewFile" },
  config = function()
    require("nvim-surround").setup({
      keymaps = {
        insert = false,
        insert_line = false,
        normal = "ys",           -- ys{motion}{char} - add surround
        normal_cur = "yss",      -- yss{char} - surround line
        normal_line = "yS",      -- yS{motion}{char} - surround line-wise
        normal_cur_line = "ySS", -- ySS{char} - surround whole line
        visual = "S",            -- S{char} - surround selection
        visual_line = "gS",      -- gS{char} - surround linewise
        delete = "ds",           -- ds{char} - delete surround
        change = "cs",           -- cs{old}{new} - change surround
        change_line = "cS",      -- cS{old}{new} - change surround linewise
      },

      surrounds = {
        -- Markdown code blocks
        ["c"] = {
          add = { "```", "```" },
          find = "```.-```",
          delete = "^(...)().-()(...)",
        },
        -- Markdown bold
        ["*"] = {
          add = { "**", "**" },
          find = "%*%*.-%*%*",
          delete = "^(..)().-()(..)",
        },
        -- Markdown italic
        ["_"] = {
          add = { "_", "_" },
          find = "_.-_",
          delete = "^(.)().-(.)()$",
        },
      },
    })
  end,
}

--[[
ðŸŽ¯ HOW TO USE NVIM-SURROUND:

1. ADD SURROUND:
   â€¢ Position cursor on word: hello
   â€¢ Type: ysiw"
   â€¢ Result: "hello"

   â€¢ Position cursor anywhere on line: local x = 42
   â€¢ Type: yss)
   â€¢ Result: (local x = 42)

2. DELETE SURROUND:
   â€¢ Position cursor inside: "hello"
   â€¢ Type: ds"
   â€¢ Result: hello

3. CHANGE SURROUND:
   â€¢ Position cursor inside: "hello"
   â€¢ Type: cs"'
   â€¢ Result: 'hello'

   â€¢ Position cursor inside: [hello]
   â€¢ Type: cs])
   â€¢ Result: (hello)

4. VISUAL MODE:
   â€¢ Select text: hello world
   â€¢ Type: S"
   â€¢ Result: "hello world"

5. ADVANCED EXAMPLES:
   â€¢ ysiw}     â†’ {word}
   â€¢ ysiwt     â†’ <tag>word</tag> (prompts for tag)
   â€¢ yss<p>    â†’ <p>entire line</p>
   â€¢ cs"<em>   â†’ "text" becomes <em>text</em>

6. REMEMBER:
   â€¢ Open brackets: ( [ { add spaces â†’ ( text )
   â€¢ Close brackets: ) ] } no spaces â†’ (text)
   â€¢ Most punctuation works: " ' ` ~ + = - *

7. CUSTOM ONES (from config):
   â€¢ ysiw*     â†’ **word** (markdown bold)
   â€¢ ysiw_     â†’ _word_ (markdown italic)
   â€¢ ysiwc     â†’ ```word``` (code block)
--]]
